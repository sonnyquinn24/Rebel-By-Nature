name: Deploy to Production

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'docker-compose*.yml'
      - '.github/workflows/deploy.yml'
      - 'test_deployment.py'
  workflow_dispatch:

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          cd src
          pip install -r requirements.txt
          pip install pytest

      - name: Run application tests
        run: |
          python -m pytest test_deployment.py -v

      - name: Test health endpoint with live server
        run: |
          cd src
          python -m uvicorn app:app --port 8000 --host 0.0.0.0 &
          sleep 15
          curl -f http://localhost:8000/health || exit 1
          echo "✅ Live health check passed"
          curl -f http://localhost:8000/ || exit 1
          echo "✅ Live root endpoint accessible"
          pkill -f uvicorn

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: test
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          cd src
          pip install -r requirements.txt

      - name: Validate deployment configuration
        run: |
          echo "🔍 Validating deployment files..."
          [ -f "Dockerfile" ] && echo "✅ Dockerfile exists" || exit 1
          [ -f "docker-compose.yml" ] && echo "✅ docker-compose.yml exists" || exit 1
          [ -f "docker-compose.prod.yml" ] && echo "✅ Production override exists" || exit 1
          [ -f "docs/deployment.md" ] && echo "✅ Deployment documentation exists" || exit 1

      - name: Test application startup
        run: |
          echo "🚀 Testing application startup..."
          cd src
          timeout 30 python -m uvicorn app:app --port 8001 --host 0.0.0.0 &
          SERVER_PID=$!
          sleep 15
          
          echo "🔍 Testing health endpoint..."
          curl -f http://localhost:8001/health || exit 1
          echo "✅ Health check passed"
          
          echo "🔍 Testing root endpoint..."
          curl -f http://localhost:8001/ || exit 1
          echo "✅ Root endpoint accessible"
          
          kill $SERVER_PID
          echo "✅ Application deployment test successful"

      - name: Generate deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Deployment Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Application**: Mergington High School Activities Website" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Version**: 3.12" >> $GITHUB_STEP_SUMMARY
          echo "- **FastAPI Version**: $(python -c 'import fastapi; print(fastapi.__version__)')" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: ✅ Passing" >> $GITHUB_STEP_SUMMARY
          echo "- **Static Files**: ✅ Accessible" >> $GITHUB_STEP_SUMMARY
          echo "- **API Endpoints**: ✅ Working" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Available Deployment Methods:" >> $GITHUB_STEP_SUMMARY
          echo "1. **Docker Compose**: \`./scripts/deploy-prod.sh\`" >> $GITHUB_STEP_SUMMARY
          echo "2. **Development**: \`./scripts/deploy-dev.sh\`" >> $GITHUB_STEP_SUMMARY
          echo "3. **Manual**: \`cd src && python -m uvicorn app:app\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📚 Documentation:" >> $GITHUB_STEP_SUMMARY
          echo "- [Deployment Guide](docs/deployment.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Application Health](http://localhost:8000/health)" >> $GITHUB_STEP_SUMMARY

  validate-docker:
    name: Validate Docker Configuration
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Docker Compose
        run: |
          echo "🔍 Validating Docker Compose configuration..."
          docker-compose config -q
          echo "✅ docker-compose.yml is valid"

      - name: Validate Production Override
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml config -q
          echo "✅ Production configuration is valid"

      - name: Test Docker Compose Structure
        run: |
          echo "📋 Docker Compose Services:"
          docker-compose config --services
          echo ""
          echo "📋 Production Services:"
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml config --services